
#define csd_LED_ADDR	0x41200000

.extern csd_main

.align 8

// Our interrupt vector table
csd_entry:
	b csd_reset
	b .
	b .
	b .
	b .
	b .
	b csd_irq
	b .

.global main
csd_reset:
main:

	mov r0, #32			// init outer loop count value
	mov r1, #0			// init inner loop count value

	ldr r2, =Input_data		// init pointer of Input_data for outer loop
	ldr r3, =Input_data		// init pointer of Input_data for inner loop

	eor r4, r4, r4		// init outer loop value
	eor r5, r5, r5		// init inner loop value
	eor r6, r6, r6		// init temporary variable for swap

outer:
	subs r0, r0, #1		// r0 = r0 - 1 & update nzcv flags
	beq save			// if r0 equals 0, sorting is end

	eor r1, r1, r1		// init inner loop count before enter loop

	ldr r2, =Input_data		// init pointer of Input_data
	ldr r3, =Input_data		// init pointer of Input_data
	add r3, r3, #4

inner:
	cmp r0, r1
	beq outer

	add r1, r1, #1

	ldr r4, [r2], #4
	ldr r5, [r3], #4

	cmp r4, r5
	blgt swap

	b inner

swap:
	str r4, [r3, #-4]
	str r5, [r2, #-4]
	mov pc, lr

save:
	ldr r0, =Input_data
	ldr r1, =Output_data

	ldmia r0, {r2-r9}
	stmia r1, {r2-r9}
	ldmia r0, {r2-r9}
	stmia r1, {r2-r9}
	ldmia r0, {r2-r9}
	stmia r1, {r2-r9}
	ldmia r0, {r2-r9}
	stmia r1, {r2-r9}

forever:
	nop
	b forever


.data
.align 4
Input_data:
	.word  2, 0, -7, -1, 3, 8, -4, 10
	//.word -9, -16, 15, 13, 1, 4, -3, 14
	//.word -8, -10, -15, 6, -13, -5, 9, 12
	//.word -11, -14, -6, 11, 5, 7, -2, -12

Output_data:
	.word 0, 0, 0, 0, 0, 0, 0, 0
	//.word 0, 0, 0, 0, 0, 0, 0, 0
	//.word 0, 0, 0, 0, 0, 0, 0, 0
	//.word 0, 0, 0, 0, 0, 0, 0, 0

// Normal Interrupt Service Routine
csd_irq:
	b .
