#include "uart_regs.h"

.data
string1:
	.ascii "----------------- LED On Period -----------------"
	.byte 0x0D
	.byte 0x0A
	.byte 0x00
string2:
	.ascii "1. 100ms 2. 200ms 3. 300ms 4. 400 ms "
	.byte 0x0D
	.byte 0x0A
	.byte 0x00
string3:
	.ascii "5. 500ms 6. 600ms 7. 700ms 8. 1 sec"
	.byte 0x0D
	.byte 0x0A
	.byte 0x00
string4:
	.ascii "----------------------------------------------------"
	.byte 0x0D
	.byte 0x0A
	.byte 0x00
string5:
	.ascii "Select:"
	.byte 0x20
	.byte 0x20
	.byte 0x20
	.byte 0x20
	.byte 0x20
	.byte 0x20
	.byte 0x20
	.byte 0x00

.text

.align 8

// Our interrupt vector table
csd_entry:
	b csd_reset
	b .
	b .
	b .
	b .
	b .
	b csd_irq
	b .

.global main
.global csd_entry
csd_reset:

uart_init:
	ldr r0,	=slcr_UART_RST_CTRL
	ldr r1, =0x0	//	reset UART
	str r1, [r0]

	ldr r0, =slcr_UART_CLK_CTRL
	ldr r1, =0x1402	// divisor = 0x14 (ref clk = 50MHz), srcsel = 0, CLKACT1 = true, CLKACT0 = false
	str r1, [r0]

	ldr r0, =uart_mode_reg0
	ldr r1, =0x20
	str r1, [r0]

	ldr r0, =uart_Control_reg0
	ldr r1, =0x28	//uart off
	str r1, [r0]

	ldr r0, =uart_Baud_rate_gen_reg0
	ldr r1, =0x3e
	str r1, [r0]

	ldr r0, =uart_Baud_rate_divider_reg0
	ldr r1, =0x6
	str r1, [r0]

	ldr r0, =uart_Control_reg0
	ldr r1, =0x00000117	//uart start
	str r1, [r0]

	ldr r0, =uart_Modem_ctrl_reg0
	ldr r1, [r0]

	ldr r0, =uart_Modem_sts_reg0
	ldr r1, [r0]

	mov pc, lr

uart_print:

	ldr r2, =string1
	bl transmit_loop
	ldr r2, =string2
	bl transmit_loop
	ldr r2, =string3
	bl transmit_loop
	ldr r2, =string4
	bl transmit_loop
	ldr r2, =string5
	bl transmit_loop

transmit_loop:

	and r3, r3, #0x8
	cmp r3, #0x8
	bne transmit_loop

	ldreqb r4, [r2], #1
	streqb r4, [r0]
	cmp r4, #0x00
	bne transmit_loop

	mov pc, lr

main:

	bl uart_init

	ldr r0, =uart_TX_RX_FIFO0
	ldr r1, =uart_Channel_sts_reg0

	bl uart_print


recvloop:
	// check empty: bit#1 is Rx FIFO empty or not (1: empty, 0: not empty)
	ldr r2, [r1]
	and r2, r2, #1<<1
	cmp r2, #0

	// read data and transmit it back to sender
	ldreq r3, [r0]
	streq r3, [r0]

	// if you type "return" (it seems like 
	// only 13 is stored in the buffer, which is "carriage return")
	// so, send "line feed" as well
	cmpeq r3, #13   // 0xD (13) is carriage return in ASCII
	moveq r4, #10 // 0xA (10) is linefeed in ASCII
	streq r4, [r0]

	b recvloop


csd_irq:
	b .
