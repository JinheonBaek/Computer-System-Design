#include "uart_regs.h"

#define csd_LED_ADDR 0x41200000

.extern csd_main

.align 8

// Our interrupt vector table
csd_entry:
	b csd_reset
	b .
	b .
	b .
	b .
	b .
	b csd_irq
	b .

.global main
.global csd_entry
csd_reset:
main:
	ldr r0,	=slcr_UART_RST_CTRL
	ldr r1, =0x0	//	reset UART
	str r1, [r0]

	ldr r0, =slcr_UART_CLK_CTRL
	ldr r1, =0x1402	// divisor = 0x14 (ref clk = 50MHz), srcsel = 0, CLKACT1 = true, CLKACT0 = false
	str r1, [r0]

	ldr r0, =uart_mode_reg0
	ldr r1, =0x20
	str r1, [r0]

	ldr r0, =uart_Control_reg0
	ldr r1, =0x28	//uart off
	str r1, [r0]

	ldr r0, =uart_Baud_rate_gen_reg0
	ldr r1, =0x3e
	str r1, [r0]

	ldr r0, =uart_Baud_rate_divider_reg0
	ldr r1, =0x6
	str r1, [r0]

	ldr r0, =uart_Control_reg0
	ldr r1, =0x00000117	//uart start
	str r1, [r0]

	ldr r0, =uart_Modem_ctrl_reg0
	ldr r1, [r0]

	ldr r0, =uart_Modem_sts_reg0
	ldr r1, [r0]


	// init
	ldr r0, =uart_TX_RX_FIFO0
	ldr r1, =uart_Channel_sts_reg0
	ldr r2, =csd_LED_ADDR

	// set which led is on during iteration
	mov r5, #0x1

forever:
	// check empty: bit#1 is Rx FIFO empty or not (1: empty, 0: not empty)
	ldr r3, [r1]
	and r3, r3, #1<<1
	cmp r3, #0			// if equal, Rx FIFO is not empty (zero flag is 1, not empty)

	// read data and transmit it back to sender
	ldreq r4, [r0]
	streq r4, [r0]

	stmfd sp!, {r0-r2}	// before call csd_main, using stack to save reuse variables
	mov r0, r4			// before function call, set parameter
	bl csd_main
	ldmfd sp!, {r0-r2}	// after call csd_main, loading variables from stack

	strb r5, [r2]				// Turn on next LED
	lsl r5, r5, #1				// logical shift left by 1
	cmp r5, #0x100				// compare
	moveq r5, #0x1				// reset LED if compare condition is true

	b forever


.data
.align 4
csd_irq:
	b .
